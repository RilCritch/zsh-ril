#!/user/bin/env zsh
# |== Directory Listing Functions ==| #
#
# Description: Functions that list directories with more information than typical list commands

# |= General directory listing

# Directory overview
# |- Arg 1: Directory to list (must be valid dir, default: pwd)
# |- Arg 2: Integer specifying extra lines for eza height calculation
dir-overview() {
    # Arguments
    dir_name=$(get-dir-c "$1")
    if [[ -z "$dir_name" ]]; then
        echo -e "${red}ERROR: ${reset}Specified Directory ${blue}${1} ${reset}does not exist."
        return 2
    fi

    if [[ -n "${2}" && $(is_number "${2}") -eq 0 ]]; then
        input="${2}"
        extra_lines=$((input + 4))
    else
        extra_lines="4"
    fi

    # Data
    dir_path=$(realpath "${dir_name}")
    num_files=$(fdfind . "${dir_path}" -H --type f --max-depth 1 | wc -l)
    num_dirs=$(fdfind . "${dir_path}" -H --type d --max-depth 1 | wc -l)
    num_links=$(fdfind . "${dir_path}" -H --type l --max-depth 1 | wc -l)
    tree_height=$(tree-size "${dir_path}" "${extra_lines}")

    # output
    if [[ "$tree_height" -eq 0 ]]; then
        echo -en "${cyan} "
        echo -en "${bold}${dir_path}${reset} ${l_black}|"

        echo -en "${reset}  "
        echo -en "${dim} ${num_files}${reset} ${l_black}|"

        echo -en "${blue}  "
        echo -en "${dim} ${num_dirs}${reset} ${l_black}|"

        echo -en "${cyan}  "
        echo -e "${dim} ${num_links}"

        across-line | clr blackL

        echo -e "${reset}"
        eza -a --group-directories-first -I=".git" "$dir_path"
    else
        echo -en "${cyan}  "
        echo -en "${bold}${dir_path}${reset} ${l_black}|"

        echo -en "${reset}  "
        echo -en "${dim} ${num_files}${reset} ${l_black}|"

        echo -en "${blue}  "
        echo -en "${dim} ${num_dirs}${reset} ${l_black}|"

        echo -en "${cyan}  "
        echo -e "${dim} ${num_links}"

        dir_length=${#dir_path}
        files_length=${#num_files}
        dirs_length=${#num_dirs}
        links_length=${#num_links}

        linewidth=$((dir_length + files_length + dirs_length + links_length + 21))

        echo -e -n "${l_black}┍"
        for (( i=1 ; i<=linewidth; i++ )); do
            echo -n "━"
        done
        echo -e "${reset}"
	    eza -Ta -L="$tree_height" --group-directories-first -I=".git" "$dir_path" | awk 'NR > 1'
    fi
}

# |- Nested Listed 

# Recursive 
# ARGs(3): $1:INT => length nested | $2:STR => 'cT' or 'cF' (clear) | $3:STR => 'aT' or 'aF' (-a)
lsr() {
	local size="$1"
    local clr="$2"
    local all="$3"

	# Default size of 2
    if [[ -z "${size}" || ! "${size}" =~ ^[0-9]+$ || "${size}" -le 0 ]]; then
		size=2
	fi

    # terminal clearing
    [[ "${clr}" == "cT" ]] && clear

    # list all
    [[ "${all}" == "aT" ]] && local all_cmd=" -a"

    local cmd_str="eza -R${all_cmd} -L=${size} --group-directories-first"
    eval "$cmd_str"
}

# Tree
# ARGs(3): $1:INT => length nested | $2:STR => 'cT' or 'cF' (clear) | $3:STR => 'aT' or 'aF' (-a)
lst() {
	local size="$1"
    local clr="$2"
    local all="$3"

	# Default size of 2
    if [[ -z "${size}" || ! "${size}" =~ ^[0-9]+$ || "${size}" -le 0 ]]; then
		size=2
	fi

    # terminal clearing
    [[ "${clr}" == "cT" ]] && clear

    # list all
    [[ "${all}" == "aT" ]] && local all_cmd=" -a"

    local cmd_str="eza -T${all_cmd} -L=${size} --group-directories-first"
    eval "$cmd_str"
}
